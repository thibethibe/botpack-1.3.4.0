"use strict";

(function () {
  // build time tests for map plugin
  // see http://mochajs.org/
  var expect, map;
  map = require('../client/map');
  expect = require('expect.js');
  describe('map plugin', function () {
    describe('marker coordinates', function () {
      it('should accept decimal lat/lon', function () {
        var marker;
        marker = map.marker('45.612094, -122.726922 Smith Lake');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'Smith Lake'
        });
      });
      it('should accept decimal lat/lon without comma', function () {
        var marker;
        marker = map.marker('45.612094 -122.726922 Smith Lake');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'Smith Lake'
        });
      });
      it('should accept decimal lat/lon without space', function () {
        var marker;
        marker = map.marker('45.612094,-122.726922 Smith Lake');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'Smith Lake'
        });
      });
      it('should accept decimal lat/lon without decimal point', function () {
        var marker;
        marker = map.marker('45, -122 Smith Lake');
        return expect(marker).to.eql({
          lat: 45,
          lon: -122,
          label: 'Smith Lake'
        });
      });
      it('should accept decimal lat/lon without decimal point or comma', function () {
        var marker;
        marker = map.marker('45 -122 Smith Lake');
        return expect(marker).to.eql({
          lat: 45,
          lon: -122,
          label: 'Smith Lake'
        });
      });
      it('should accept nautical lat/lon', function () {
        var marker;
        marker = map.marker('45°36\'43.5"N 122°43\'36.9"W Smith Lake');
        return expect(marker).to.eql({
          lat: 45.61208333333334,
          lon: -122.72691666666667,
          label: 'Smith Lake'
        });
      });
      it('should accept nautical lat/lon in lower case', function () {
        var marker;
        marker = map.marker('45°36\'43.5"n 122°43\'36.9"w Smith Lake');
        return expect(marker).to.eql({
          lat: 45.61208333333334,
          lon: -122.72691666666667,
          label: 'Smith Lake'
        });
      });
      return it('should accept nautical lat/lon sans seconds', function () {
        var marker;
        marker = map.marker('45°36\'N 122°43\'W Smith Lake');
        return expect(marker).to.eql({
          lat: 45.6,
          lon: -122.71666666666667,
          label: 'Smith Lake'
        });
      });
    });
    describe('marker labels', function () {
      it('should accept decimal lat/lon without label', function () {
        var marker;
        marker = map.marker('45.612094, -122.726922');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: ''
        });
      });
      it('should accept decimal lat/lon with internal links in labels', function () {
        var marker;
        marker = map.marker('45.612094, -122.726922 See [[Portland\'s Smith Lake]]');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'See <internal>'
        });
      });
      it('should accept decimal lat/lon with internal links in labels', function () {
        var marker;
        marker = map.marker('45.612094, -122.726922 See [http://www.oregonmetro.gov/parks/smith-and-bybee-wetlands-natural-area metro]');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'See <external>'
        });
      });
      return it('should accept decimal lat/lon with escaped punctuation in labels', function () {
        var marker;
        marker = map.marker('45.612094, -122.726922 Smith & Bybee Wetlands');
        return expect(marker).to.eql({
          lat: 45.612094,
          lon: -122.726922,
          label: 'Smith &amp; Bybee Wetlands'
        });
      });
    });
    return describe('markup', function () {
      var bo, hi, ho, li, n46, n47, p46, p47, pi;
      hi = "Hello";
      ho = "World";
      n46 = "46., -122. Wind River";
      n47 = "47., -122. Bagby";
      li = "LINEUP";
      bo = "BOUNDARY";
      p46 = {
        lat: 46,
        lon: -122,
        label: 'Wind River'
      };
      p47 = {
        lat: 47,
        lon: -122,
        label: 'Bagby'
      };
      pi = {
        lat: 51.5,
        lon: 0.0,
        label: 'North Greenwich'
      };
      it('should accept caption only', function () {
        var parse;
        parse = map.parse({
          'text': hi
        });
        return expect(parse).to.eql({
          markers: [],
          caption: 'Hello',
          boundary: []
        });
      });
      it('should accept marker only', function () {
        var parse;
        parse = map.parse({
          'text': n46
        });
        return expect(parse).to.eql({
          markers: [p46],
          caption: '',
          boundary: [p46]
        });
      });
      it('should accept mixed markers and caption', function () {
        var parse;
        parse = map.parse({
          'text': [hi, n46, ho, n47].join("\n")
        });
        return expect(parse).to.eql({
          markers: [p46, p47],
          caption: 'Hello<br>World',
          boundary: [p46, p47]
        });
      });
      it('should merge markers with lineup', function () {
        var parse;
        parse = map.parse({
          'text': [n46, li].join("\n")
        });
        return expect(parse).to.eql({
          markers: [p46, pi],
          lineupMarkers: [pi],
          caption: '',
          boundary: [p46, pi],
          tools: {
            freeze: true
          }
        });
      });
      it('should separate markers from lineup for boundary', function () {
        var parse;
        parse = map.parse({
          'text': [n46, bo, li].join("\n")
        });
        return expect(parse).to.eql({
          markers: [p46, pi],
          lineupMarkers: [pi],
          caption: '',
          boundary: [p46],
          tools: {
            freeze: true
          }
        });
      });
      it('should accept boundary without marker', function () {
        var parse;
        parse = map.parse({
          'text': [bo + n46].join("\n")
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [p46]
        });
      });
      it('should accept multiple boundary without marker', function () {
        var parse;
        parse = map.parse({
          'text': [bo + n46, bo + n47].join("\n")
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [p46, p47]
        });
      });
      it('should add markers to boundary until stopped', function () {
        var parse;
        parse = map.parse({
          'text': [n46, bo, li, bo + n47].join("\n")
        });
        return expect(parse).to.eql({
          markers: [p46, pi],
          lineupMarkers: [pi],
          caption: '',
          boundary: [p46, p47],
          tools: {
            freeze: true
          }
        });
      });
      it('should accept overlay url and bounds', function () {
        var parse;
        parse = map.parse({
          'text': "OVERLAY http://example.com 45.5,-122.0 44.5,-123.0"
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [],
          overlays: [{
            url: 'http://example.com',
            bounds: [[45.5, -122.0], [44.5, -123.0]]
          }]
        });
      });
      it('should accept overlay url and bounds with space after comma', function () {
        var parse;
        parse = map.parse({
          'text': "OVERLAY http://example.com 45.5, -122.0 44.5, -123.0"
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [],
          overlays: [{
            url: 'http://example.com',
            bounds: [[45.5, -122.0], [44.5, -123.0]]
          }]
        });
      });
      it('frozen markers should be markers', function () {
        var parse;
        parse = map.parse({
          'text': '',
          'frozen': p46
        });
        return expect(parse).to.eql({
          markers: [p46],
          caption: '',
          boundary: [p46]
        });
      });
      it('lineup with frozen should be lineupMarkers', function () {
        var parse;
        parse = map.parse({
          'text': [n46, li].join("\n"),
          'frozen': p47
        });
        return expect(parse).to.eql({
          markers: [p47, p46],
          caption: '',
          boundary: [p47, p46],
          tools: {
            freeze: true
          }
        });
      });
      it('should add SEARCH tool', function () {
        var parse;
        parse = map.parse({
          'text': 'SEARCH'
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [],
          tools: {
            search: true
          }
        });
      });
      return it('should add LOCATE tool', function () {
        var parse;
        parse = map.parse({
          'text': 'LOCATE'
        });
        return expect(parse).to.eql({
          markers: [],
          caption: '',
          boundary: [],
          tools: {
            locate: true
          }
        });
      });
    });
  });
}).call(void 0);
//# sourceMappingURL=test.js.map
