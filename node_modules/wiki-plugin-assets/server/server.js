"use strict";

(function () {
  // assets plugin, server-side component
  // These handlers are launched with the wiki server. 
  var async, basename, cors, formidable, fs, mkdirp, startServer;
  fs = require('fs');
  var _require = require('path');
  basename = _require.basename;
  mkdirp = require('mkdirp');
  async = require('async');
  formidable = require('formidable');
  cors = function cors(req, res, next) {
    res.header('Access-Control-Allow-Origin', '*');
    return next();
  };
  startServer = function startServer(params) {
    var app, argv;
    app = params.app;
    argv = params.argv;
    app.get('/plugin/assets/list', cors, function (req, res) {
      var assets, isFile, path;
      assets = (req.query.assets || '').match(/([\w\/-]*)/)[1];
      path = "".concat(argv.assets, "/").concat(assets);
      isFile = function isFile(name, done) {
        if (name.match(/^\./)) {
          return done(false);
        }
        return fs.stat("".concat(path, "/").concat(name), function (error, stats) {
          if (error) {
            return done(error);
          }
          return done(null, stats.isFile());
        });
      };
      return fs.readdir(path, function (error, names) {
        if (error) {
          return res.json({
            error: error
          });
        }
        return async.filter(names, isFile, function (error, files) {
          return res.json({
            error: error,
            files: files
          });
        });
      });
    });
    app.post('/plugin/assets/upload', function (req, res) {
      var form;
      if (!app.securityhandler.isAuthorized(req)) {
        return res.status(401).send("must be logged in owner");
      }
      form = new formidable.IncomingForm();
      form.multiples = true;
      form.uploadDir = "".concat(argv.assets);
      mkdirp.sync(form.uploadDir);
      form.on('field', function (name, value) {
        var assets;
        if (name !== 'assets') {
          return;
        }
        assets = (value || '').match(/([\w\/-]*)/)[1];
        form.uploadDir = "".concat(argv.assets, "/").concat(assets);
        return mkdirp.sync(form.uploadDir);
      });
      form.on('file', function (field, file) {
        return fs.rename(file.path, "".concat(form.uploadDir, "/").concat(file.name), function (err) {
          if (err) {
            return res.status(500).send("rename error: ".concat(err));
          }
        });
      });
      form.on('error', function (err) {
        console.log("upload error: ".concat(err));
        return res.status(500).send("upload error: ".concat(err));
      });
      form.on('end', function () {
        return res.end('success');
      });
      return form.parse(req);
    });
    return app.post('/plugin/assets/delete', function (req, res) {
      var assets, file, ref, ref1, ref2, ref3, toRemove;
      if (!(((ref = req.session) != null ? (ref1 = ref.passport) != null ? ref1.user : void 0 : void 0) || ((ref2 = req.session) != null ? ref2.email : void 0) || ((ref3 = req.session) != null ? ref3.friend : void 0))) {
        return res.status(401).send("must login");
      }
      file = basename(req.query.file || '');
      assets = (req.query.assets || '').match(/([\w\/-]*)/)[1];
      toRemove = "".concat(argv.assets, "/").concat(assets, "/").concat(file);
      return fs.unlink(toRemove, function (err) {
        if (err) {
          return res.status(500).send(err.message);
        }
        return res.status(200).send('ok');
      });
    });
  };
  module.exports = {
    startServer: startServer
  };
}).call(void 0);
//# sourceMappingURL=server.js.map
