"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
(function () {
  var report;
  report = require('./report');
  describe('report plugin', function () {
    describe('parsing', function () {
      it('returns an array', function () {
        var schedule;
        schedule = report.parse("");
        return expect(schedule).to.eql([]);
      });
      it('parses intervals', function () {
        var issue;
        var _report$parse = report.parse("DAILY ward@example.com");
        var _report$parse2 = _slicedToArray(_report$parse, 1);
        issue = _report$parse2[0];
        return expect(issue.interval).to.be('DAILY');
      });
      it('parses offsets', function () {
        var issue;
        var _report$parse3 = report.parse("WEEKLY TUESDAY NOON");
        var _report$parse4 = _slicedToArray(_report$parse3, 1);
        issue = _report$parse4[0];
        return expect(issue.offsets).to.eql(['TUESDAY', 'NOON']);
      });
      it('parses recipients', function () {
        var issue;
        var _report$parse5 = report.parse("DAILY ward@c2.com root@c2.com");
        var _report$parse6 = _slicedToArray(_report$parse5, 1);
        issue = _report$parse6[0];
        return expect(issue.recipients).to.eql(['ward@c2.com', 'root@c2.com']);
      });
      return it('parses multiple issues', function () {
        var schedule;
        schedule = report.parse("WEEKLY MONTHLY YEARLY");
        return expect(schedule).to.have.length(3);
      });
    });
    return describe('advancing', function () {
      it('handles weeks', function () {
        var count, date, issue;
        var _report$parse7 = report.parse("WEEKLY");
        var _report$parse8 = _slicedToArray(_report$parse7, 1);
        issue = _report$parse8[0];
        date = new Date(2012, 12 - 1, 25, 3, 4, 5);
        count = function count(i) {
          return report.advance(date, issue, i);
        };
        expect(count(-1)).to.eql(new Date(2012, 12 - 1, 16));
        expect(count(0)).to.eql(new Date(2012, 12 - 1, 23));
        expect(count(1)).to.eql(new Date(2012, 12 - 1, 30));
        return expect(count(2)).to.eql(new Date(2013, 1 - 1, 6));
      });
      it('handles weeks with offsets (noon > now)', function () {
        var count, date, issue;
        var _report$parse9 = report.parse("WEEKLY TUESDAY NOON");
        var _report$parse10 = _slicedToArray(_report$parse9, 1);
        issue = _report$parse10[0];
        date = new Date(2012, 12 - 1, 25, 3, 4, 5);
        count = function count(i) {
          return report.advance(date, issue, i);
        };
        expect(count(-1)).to.eql(new Date(2012, 12 - 1, 11, 12));
        expect(count(0)).to.eql(new Date(2012, 12 - 1, 18, 12));
        expect(count(1)).to.eql(new Date(2012, 12 - 1, 25, 12));
        return expect(count(2)).to.eql(new Date(2013, 1 - 1, 1, 12));
      });
      it('handles years with offsets (march < now)', function () {
        var count, date, issue;
        var _report$parse11 = report.parse("YEARLY MARCH FRIDAY EVENING");
        var _report$parse12 = _slicedToArray(_report$parse11, 1);
        issue = _report$parse12[0];
        date = new Date(2012, 12 - 1, 25, 3, 4, 5);
        count = function count(i) {
          return report.advance(date, issue, i);
        };
        expect(count(-1)).to.eql(new Date(2011, 3 - 1, 4, 18));
        expect(count(0)).to.eql(new Date(2012, 3 - 1, 2, 18));
        expect(count(1)).to.eql(new Date(2013, 3 - 1, 1, 18));
        return expect(count(2)).to.eql(new Date(2014, 3 - 1, 7, 18));
      });
      return it('handles election day (election > now)', function () {
        var count, date, issue;
        var _report$parse13 = report.parse("YEARLY NOVEMBER MONDAY TUESDAY MORNING");
        var _report$parse14 = _slicedToArray(_report$parse13, 1);
        issue = _report$parse14[0];
        date = new Date(2016, 1, 2, 3, 4, 5);
        count = function count(i) {
          return report.advance(date, issue, i);
        };
        expect(count(-1)).to.eql(new Date(2014, 11 - 1, 4, 6));
        expect(count(0)).to.eql(new Date(2015, 11 - 1, 3, 6));
        expect(count(1)).to.eql(new Date(2016, 11 - 1, 8, 6));
        return expect(count(2)).to.eql(new Date(2017, 11 - 1, 7, 6));
      });
    });
  });
}).call(void 0);
//# sourceMappingURL=test.js.map
