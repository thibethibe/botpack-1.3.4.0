{
  "version": 3,
  "names": [
    "expect",
    "grep",
    "require",
    "describe",
    "page",
    "it",
    "errors",
    "listing",
    "program",
    "_grep$parse",
    "parse",
    "_grep$parse2",
    "_slicedToArray",
    "to",
    "eql",
    "_grep$parse3",
    "_grep$parse4",
    "_grep$parse5",
    "_grep$parse6",
    "_grep$parse7",
    "_grep$parse8",
    "_grep$parse9",
    "_grep$parse10",
    "_grep$parse11",
    "_grep$parse12",
    "_grep$parse13",
    "_grep$parse14",
    "_grep$parse15",
    "_grep$parse16",
    "_grep$parse17",
    "_grep$parse18",
    "_grep$parse19",
    "_grep$parse20",
    "evalPage",
    "be"
  ],
  "sources": [
    "test.coffee"
  ],
  "sourcesContent": [
    "# build time tests for grep plugin\n# see http://mochajs.org/\n\ngrep = require '../client/grep'\nexpect = require 'expect.js'\n\ndescribe 'grep plugin', ->\n\n  describe 'parse', ->\n    it 'accepts empty', ->\n      [program,listing,errors] = grep.parse ''\n      expect(errors).to.eql 0\n\n    it 'accepts whitespace', ->\n      [program,listing,errors] = grep.parse '   \\n   '\n      expect(errors).to.eql 0\n\n    it 'ignores empty lines', ->\n      [program,listing,errors] = grep.parse '   \\n    \\n'\n      expect(program).to.eql []\n\n    it 'accepts item types', ->\n      [program,listing,errors] = grep.parse 'ITEM paragraph'\n      expect(program).to.eql [{'op': 'ITEM', 'type': 'paragraph'}]\n\n    it 'accepts action types', ->\n      [program,listing,errors] = grep.parse 'ACTION fork'\n      expect(program).to.eql [{'op': 'ACTION', 'type': 'fork'}]\n\n    it 'accepts text patterns', ->\n      [program,listing,errors] = grep.parse 'TEXT foo'\n      expect(program).to.eql [{'op':'TEXT', 'regex': {}}]\n\n    it 'accepts item with unspecified type', ->\n      [program,listing,errors] = grep.parse 'ITEM'\n      expect(program).to.eql [{'op': 'ITEM', 'type': ''}]\n\n\n  describe 'parse fails on', ->\n    it 'unknown operation', ->\n      [program,listing,errors] = grep.parse 'MUMBLE'\n      expect(errors).to.eql 1\n\n    it 'unreasonable type', ->\n      [program,listing,errors] = grep.parse 'ITEM void*'\n      expect(errors).to.eql 1\n\n    it 'irregular expression', ->\n      [program,listing,errors] = grep.parse 'TEXT a)b'\n      expect(errors).to.eql 1\n\n  page = {\n    'title':'Federated Wiki',\n    'story':[\n      {'type':'paragraph'; 'text':'It keeps getting better.'},\n      {\"type\":'video'; 'text':'YOUTUBE 2R3LM_A7Cg4\\nWard introduces the parts.'}\n    ],\n    'journal':[\n      {'type':'create'},\n      {'type':'fork', 'site':'fed.wiki.org'}\n    ]\n  }\n\n  describe 'sample eval', ->\n    it 'should find a video', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':'video'}], 0).to.be true\n\n    it 'should not find a method', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':'method'}], 0).to.be false\n\n    it 'should find a fork', ->\n      expect(grep.evalPage page, [{'op': 'ACTION', 'type':'fork'}], 0).to.be true\n\n    it 'should not find a delete', ->\n      expect(grep.evalPage page, [{'op': 'ACTION', 'type':'delete'}], 0).to.be false\n\n    it 'should find ward in text', ->\n      expect(grep.evalPage page, [{'op': 'ITEM', 'type':''}, {'op':'TEXT', 'regex':/ward/im}], 0).to.be true\n\n    it 'should find federated in title', ->\n      expect(grep.evalPage page, [{'op': 'TITLE', 'regex':/federated/im}], 0).to.be true\n\n\n"
  ],
  "mappings": "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"
}