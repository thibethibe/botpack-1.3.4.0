"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
(function () {
  // build time tests for grep plugin
  // see http://mochajs.org/
  var expect, grep;
  grep = require('../client/grep');
  expect = require('expect.js');
  describe('grep plugin', function () {
    var page;
    describe('parse', function () {
      it('accepts empty', function () {
        var errors, listing, program;
        var _grep$parse = grep.parse('');
        var _grep$parse2 = _slicedToArray(_grep$parse, 3);
        program = _grep$parse2[0];
        listing = _grep$parse2[1];
        errors = _grep$parse2[2];
        return expect(errors).to.eql(0);
      });
      it('accepts whitespace', function () {
        var errors, listing, program;
        var _grep$parse3 = grep.parse('   \n   ');
        var _grep$parse4 = _slicedToArray(_grep$parse3, 3);
        program = _grep$parse4[0];
        listing = _grep$parse4[1];
        errors = _grep$parse4[2];
        return expect(errors).to.eql(0);
      });
      it('ignores empty lines', function () {
        var errors, listing, program;
        var _grep$parse5 = grep.parse('   \n    \n');
        var _grep$parse6 = _slicedToArray(_grep$parse5, 3);
        program = _grep$parse6[0];
        listing = _grep$parse6[1];
        errors = _grep$parse6[2];
        return expect(program).to.eql([]);
      });
      it('accepts item types', function () {
        var errors, listing, program;
        var _grep$parse7 = grep.parse('ITEM paragraph');
        var _grep$parse8 = _slicedToArray(_grep$parse7, 3);
        program = _grep$parse8[0];
        listing = _grep$parse8[1];
        errors = _grep$parse8[2];
        return expect(program).to.eql([{
          'op': 'ITEM',
          'type': 'paragraph'
        }]);
      });
      it('accepts action types', function () {
        var errors, listing, program;
        var _grep$parse9 = grep.parse('ACTION fork');
        var _grep$parse10 = _slicedToArray(_grep$parse9, 3);
        program = _grep$parse10[0];
        listing = _grep$parse10[1];
        errors = _grep$parse10[2];
        return expect(program).to.eql([{
          'op': 'ACTION',
          'type': 'fork'
        }]);
      });
      it('accepts text patterns', function () {
        var errors, listing, program;
        var _grep$parse11 = grep.parse('TEXT foo');
        var _grep$parse12 = _slicedToArray(_grep$parse11, 3);
        program = _grep$parse12[0];
        listing = _grep$parse12[1];
        errors = _grep$parse12[2];
        return expect(program).to.eql([{
          'op': 'TEXT',
          'regex': {}
        }]);
      });
      return it('accepts item with unspecified type', function () {
        var errors, listing, program;
        var _grep$parse13 = grep.parse('ITEM');
        var _grep$parse14 = _slicedToArray(_grep$parse13, 3);
        program = _grep$parse14[0];
        listing = _grep$parse14[1];
        errors = _grep$parse14[2];
        return expect(program).to.eql([{
          'op': 'ITEM',
          'type': ''
        }]);
      });
    });
    describe('parse fails on', function () {
      it('unknown operation', function () {
        var errors, listing, program;
        var _grep$parse15 = grep.parse('MUMBLE');
        var _grep$parse16 = _slicedToArray(_grep$parse15, 3);
        program = _grep$parse16[0];
        listing = _grep$parse16[1];
        errors = _grep$parse16[2];
        return expect(errors).to.eql(1);
      });
      it('unreasonable type', function () {
        var errors, listing, program;
        var _grep$parse17 = grep.parse('ITEM void*');
        var _grep$parse18 = _slicedToArray(_grep$parse17, 3);
        program = _grep$parse18[0];
        listing = _grep$parse18[1];
        errors = _grep$parse18[2];
        return expect(errors).to.eql(1);
      });
      return it('irregular expression', function () {
        var errors, listing, program;
        var _grep$parse19 = grep.parse('TEXT a)b');
        var _grep$parse20 = _slicedToArray(_grep$parse19, 3);
        program = _grep$parse20[0];
        listing = _grep$parse20[1];
        errors = _grep$parse20[2];
        return expect(errors).to.eql(1);
      });
    });
    page = {
      'title': 'Federated Wiki',
      'story': [{
        'type': 'paragraph',
        'text': 'It keeps getting better.'
      }, {
        "type": 'video',
        'text': 'YOUTUBE 2R3LM_A7Cg4\nWard introduces the parts.'
      }],
      'journal': [{
        'type': 'create'
      }, {
        'type': 'fork',
        'site': 'fed.wiki.org'
      }]
    };
    return describe('sample eval', function () {
      it('should find a video', function () {
        return expect(grep.evalPage(page, [{
          'op': 'ITEM',
          'type': 'video'
        }], 0)).to.be(true);
      });
      it('should not find a method', function () {
        return expect(grep.evalPage(page, [{
          'op': 'ITEM',
          'type': 'method'
        }], 0)).to.be(false);
      });
      it('should find a fork', function () {
        return expect(grep.evalPage(page, [{
          'op': 'ACTION',
          'type': 'fork'
        }], 0)).to.be(true);
      });
      it('should not find a delete', function () {
        return expect(grep.evalPage(page, [{
          'op': 'ACTION',
          'type': 'delete'
        }], 0)).to.be(false);
      });
      it('should find ward in text', function () {
        return expect(grep.evalPage(page, [{
          'op': 'ITEM',
          'type': ''
        }, {
          'op': 'TEXT',
          'regex': /ward/im
        }], 0)).to.be(true);
      });
      return it('should find federated in title', function () {
        return expect(grep.evalPage(page, [{
          'op': 'TITLE',
          'regex': /federated/im
        }], 0)).to.be(true);
      });
    });
  });
}).call(void 0);
//# sourceMappingURL=test.js.map
