"use strict";

(function () {
  var expect, report;
  report = require('../client/calendar');
  expect = require('expect.js');
  describe('calendar plugin', function () {
    describe('parsing', function () {
      it('recognizes decades', function () {
        expect(report.parse("1960 DECADE")).to.eql([{
          year: 1960,
          span: 'DECADE'
        }]);
        expect(report.parse("DECADE 1960")).to.eql([{
          year: 1960,
          span: 'DECADE'
        }]);
        return expect(report.parse("60S")).to.eql([{
          year: 1960,
          span: 'DECADE'
        }]);
      });
      it('recognizes half decades', function () {
        expect(report.parse("60S EARLY")).to.eql([{
          year: 1960,
          span: 'EARLY'
        }]);
        expect(report.parse("EARLY 60S")).to.eql([{
          year: 1960,
          span: 'EARLY'
        }]);
        return expect(report.parse("LATE 60S")).to.eql([{
          year: 1960,
          span: 'LATE'
        }]);
      });
      it('recognizes years', function () {
        return expect(report.parse("1960")).to.eql([{
          year: 1960,
          span: 'YEAR'
        }]);
      });
      it('recognizes months', function () {
        expect(report.parse("1960 MAR")).to.eql([{
          year: 1960,
          month: 3,
          span: 'MONTH'
        }]);
        expect(report.parse("MAR 1960")).to.eql([{
          year: 1960,
          month: 3,
          span: 'MONTH'
        }]);
        return expect(report.parse("MARCH 1960")).to.eql([{
          year: 1960,
          month: 3,
          span: 'MONTH'
        }]);
      });
      it('recognizes days', function () {
        expect(report.parse("MAR 5 1960")).to.eql([{
          year: 1960,
          month: 3,
          day: 5,
          span: 'DAY'
        }]);
        expect(report.parse("1960 MAR 5")).to.eql([{
          year: 1960,
          month: 3,
          day: 5,
          span: 'DAY'
        }]);
        return expect(report.parse("5 MAR 1960")).to.eql([{
          year: 1960,
          month: 3,
          day: 5,
          span: 'DAY'
        }]);
      });
      return it('recognizes labels', function () {
        expect(report.parse("Ward's CHM Interview")).to.eql([{
          label: "Ward's CHM Interview"
        }]);
        expect(report.parse("APRIL 24 2006 Ward's CHM Interview")).to.eql([{
          year: 2006,
          month: 4,
          day: 24,
          span: 'DAY',
          label: "Ward's CHM Interview"
        }]);
        return expect(report.parse(" APRIL  24  2006\tWard's  CHM  Interview  ")).to.eql([{
          year: 2006,
          month: 4,
          day: 24,
          span: 'DAY',
          label: "Ward's CHM Interview"
        }]);
      });
    });
    describe('applying', function () {
      var interview, oneDayInMS, today;
      today = new Date(2013, 2 - 1, 3);
      interview = new Date(2006, 4 - 1, 24);
      oneDayInMS = 24 * 60 * 60 * 1000;
      it('recalls input', function () {
        var input, output, rows;
        input = {
          interview: {
            date: interview
          }
        };
        output = {};
        rows = report.parse("interview");
        return expect(report.apply(input, output, today, rows)).to.eql([{
          date: interview,
          label: 'interview',
          units: ['day'],
          value: Math.floor(interview.getTime() / oneDayInMS),
          precision: oneDayInMS
        }]);
      });
      return it('extends today', function () {
        var input, output, results, rows;
        input = {};
        output = {};
        rows = report.parse("APRIL 1 April Fools Day");
        results = report.apply(input, output, today, rows);
        expect(results).to.eql([{
          date: new Date(2013, 4 - 1, 1),
          month: 4,
          day: 1,
          span: 'DAY',
          label: 'April Fools Day',
          units: ['day'],
          value: Math.floor(new Date(2013, 4 - 1, 1).getTime() / oneDayInMS),
          precision: oneDayInMS
        }]);
        return expect(output).to.eql({
          'April Fools Day': {
            date: new Date(2013, 4 - 1, 1),
            span: 'DAY'
          }
        });
      });
    });
    return describe('radarSource', function () {
      var mock;
      mock = {};
      beforeEach(function () {
        var results;
        mock.el = {};
        mock.$el = {
          addClass: function addClass(c) {
            return mock.actualClass = c;
          },
          get: function get(n) {
            return mock.el;
          }
        };
        results = report.apply({}, {}, new Date(), report.parse("2015 SEP 1 Starts Now\nLATE 90S Some languages were born"));
        return report.radarSource(mock.$el, results);
      });
      it('calls addClass with "radar-source"', function () {
        return expect(mock.actualClass).to.be('radar-source');
      });
      it('adds radarData() to the DOM element', function () {
        return expect(mock.el).to.have.key('radarData');
      });
      it('uses the labels as keys in the radarData', function () {
        return expect(mock.el.radarData()).to.have.key('Starts Now');
      });
      it('puts the distance from the Epoch into the values in the radarData', function () {
        var data, daysSinceEpoch;
        data = mock.el.radarData();
        daysSinceEpoch = Math.floor(new Date(2015, 8, 1).getTime() / (24 * 60 * 60 * 1000)); // 16,679
        expect(data['Starts Now']).to.have.key('value');
        return expect(data['Starts Now'].value).to.eql(daysSinceEpoch);
      });
      it('specifies units & precision with values in the radarData', function () {
        var data, oneDayInMS;
        data = mock.el.radarData();
        oneDayInMS = 24 * 60 * 60 * 1000; // 86,400,000
        expect(data['Starts Now']).to.have.key('units');
        expect(data['Starts Now'].units).to.eql(['day']);
        expect(data['Starts Now']).to.have.key('precision');
        return expect(data['Starts Now'].precision).to.eql(oneDayInMS);
      });
      return it('chooses units & precision to match the parsed span of the date', function () {
        var data, oneDecadeInMS;
        data = mock.el.radarData();
        oneDecadeInMS = 10 * 365.25 * 24 * 60 * 60 * 1000; // 315,576,000,000
        expect(data['Some languages were born']).to.have.key('units');
        expect(data['Some languages were born'].units).to.eql(['decade']);
        expect(data['Some languages were born']).to.have.key('precision');
        return expect(data['Some languages were born'].precision).to.eql(oneDecadeInMS);
      });
    });
  });

  // describe 'formatting', ->
  // 	it 'returns an array of strings', ->
  // 		rows = report.format report.parse ""
  // 		expect(rows).to.eql []
}).call(void 0);
//# sourceMappingURL=test.js.map
